1. code coverage
Java侧已知两种方式：
* 第一种是idea自带的jacoco方式检测 属于插件形式
* 第二种是执行gradlew命令检测，实现方式应该有多种，我只实现了一种需要写gradle脚本的方法
* 这个是我参考的网站，我实现的是第二个blog里的方法
**  [https://docs.gradle.org/current/userguide/jacoco_plugin.html]
**  [https://blog.waterstrong.me/java-code-coverage/]
** [http://www.tuicool.com/articles/aq6rUz]
** [https://www.ibm.com/developerworks/cn/java/j-lo-jacoco/]

Js侧:下载JSCoverage，执行命令：jscoverage 项目路径 输出路径 可以查到js测试用例覆盖率
参考网址：http://www.cnblogs.com/Leo_wl/p/4464319.html
查看结果的时候需要启动本地服务器，然后在服务器上查看。

2. jslint/jshint
node环境下安装jslint
 *   命令行： npm install -g jslint
 *   目前调查只能逐个检测js文件，继续调查是否有idea插件可以用，或者有没有办法能够一次性检测所有js文件
 *   可以通过jslint配置文件进行对文件检测标准的设定
安装jshint
 * 命令行 :npm install -g jshint
 * 建议使用jshint
jslint不能一次检测所有的文件，但是可以检测特定文件夹下的所有js文件
eslint -o reportFilePathAndName -f suffix filePath .js
参考网址:[http://jshint.com/docs/]

3.gradlelint java
 * [https://github.com/nebula-plugins/gradle-lint-plugin]


使用的资源：https://stackoverflow.com/questions/16638345/how-to-decode-gzip-compressed-request-body-in-spring-mvc
模拟前台数据：
登录putty，创建json文件，压缩成gzip文件，命令行：gzip -c test.json > test.json.gz
访问本地服务器命令：
 curl -v -s --trace-ascii http_post_trace.log --data-binary @test.json.gz  -H "Content-Type: application/json" -H "accept-Encoding: gzip" -H "Content-Encoding: gzip"  -X POST http://192.168.1.108:8080/lottery/version
后台接受数据解压
调查过程：
简单查看HTTP头协议包含的内容
查看gzipInputStream解压
查看request获取输入输出流
请问了大明一次，了解到没有前台的压缩数据
了解curl模拟请求
解压成功
解压后的数据传到Controller
总结：
1. 变量名的定义问题要注意，不要仅关注变量值或者变量名，要同时注意
2. 不能局限于当前的文件，要考虑周全
3. 不懂得文件要仔细查看再修改，免得麻烦
4. 使用其他人的文件时尽量不要修改源文件的结构，以免修改错误影响效率和结果

本地安装centos 7
配置tomcat
配置nginx 
配置java
负载均衡
docker

外网访问本地虚拟机，网络设置需要使用桥接方式
然后关闭防火墙 service firewalld stop  
查看防火墙状态  iptables -L
这样就可以访问了
