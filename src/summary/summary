1. java的特性

封装 继承 多态

2. 一维数组的定义方式

(1)int arr[]
arr=new int[5]
(2)int arr[]=new int[12]
(3)int[] arr;

3. 一维数组的初始化方式
(1)int arr[]=new int[]{1,2,3};
(2)int arr2[]={1,2,3.4};

3. 二维数组的定义方式

(1)int arr[2][];
arr[0]=new int[2];
arr[1]=new int[3];
(2)int arr[][]=new int[12][3];
(3)int[][] arr;

4. 一维数组的初始化方式
(1)int arr[][]={{12,0}{23,24}};
(2)int arr2[0][1]=4;

5.无修饰词变量的使用范围
包内可用

6. 接口和抽象类的区别
  1)、抽象类和接口都不能直接实例化，如果要实例化，抽象类变量必须指向实现所有抽象方法的子类对象，接口变量必须指向实现所有接口方法的类对象。

  2)、抽象类要被子类继承，接口要被类实现。

  3)、接口只能做方法申明，抽象类中可以做方法申明，也可以做方法实现

  4)、接口里定义的变量只能是公共的静态的常量，抽象类中的变量是普通变量。

  5)、抽象类里的抽象方法必须全部被子类所实现，如果子类不能全部实现父类抽象方法，那么该子类只能是抽象类。同样，一个实现接口的时候，如不能全部实现接口方法，那么该类也只能为抽象类。

  6)、抽象方法只能申明，不能实现。abstract void abc();不能写成abstract void abc(){}。

  7)、抽象类里可以没有抽象方法

  8)、如果一个类里有抽象方法，那么这个类只能是抽象类

  9)、抽象方法要被实现，所以不能是静态的，也不能是私有的。

  10)、接口可继承接口，并可多继承接口，但类只能单根继承。

    特别是对于公用的实现代码，抽象类有它的优点。抽象类能够保证实现的层次关系，避免代码重复。然而，即使在使用抽 象类的场合，也不要忽视通过接口定义行为模型的原则。从实践的角度来看，如果依赖于抽象类来定义行为，往往导致过于复杂的继承关系，而通过接口定义行为能 够更有效地分离行为与实现，为代码的维护和修改带来方便。

7. 输入输出流
  inputstream/outputstream 字节输入/输出流
  fileinputStream/fileOutputStream 文件输入输出流
  bufferReader/bufferWriter 
  StringBuilder/StringBuffer  builder更快 但是在多线程情况下不安全  buffer在多线程中安全
  
